import pandas as pd importseabornassns
importmatplotlib.pyplotasplt

data=pd.read_csv('/content/dataset28.csv',index_col=0) data.head()

data.shape

data=data.drop(["title","subject","date"],axis=1) data.isnull().sum()
data = data.sample(frac=1) data.reset_index(inplace=True) data.drop(["index"], axis=1, inplace=True)
 

sns.countplot(data=data,
x='class', order=data['class'].value_counts().index)

fromtqdmimporttqdm import re
import nltk nltk.download('punkt') nltk.download('stopwords')
fromnltk.corpusimportstopwords
from nltk.tokenize import word_tokenize fromnltk.stem.porterimportPorterStemmer from wordcloud import WordCloud

def preprocess_text(text_data): preprocessed_text = []

forsentenceintqdm(text_data):
sentence = re.sub(r'[^\w\s]', '', sentence) preprocessed_text.append(''.join(token.lower()
fortokeninstr(sentence).split() if token not in
stopwords.words('english'))) return preprocessed_text
consolidated=''.join(
wordforwordindata['text'][data['class']==1].astype(str))
 
wordCloud=WordCloud(width=1600,
height=800, random_state=21, max_font_size=110, collocations=False)
plt.figure(figsize=(15, 10)) plt.imshow(wordCloud.generate(consolidated), interpolation='bilinear') plt.axis('off')
plt.show()


consolidated=''.join(
wordforwordindata['text'][data['class']==0].astype(str)) wordCloud = WordCloud(width=1600,
height=800, random_state=21, max_font_size=110, collocations=False)
plt.figure(figsize=(15, 10)) plt.imshow(wordCloud.generate(consolidated), interpolation='bilinear') plt.axis('off')
plt.show()

fromsklearn.feature_extraction.textimportCountVectorizer


def get_top_n_words(corpus, n=None): vec = CountVectorizer().fit(corpus) bag_of_words=vec.transform(corpus)
 
sum_words=bag_of_words.sum(axis=0) words_freq=[(word,sum_words[0,idx])
forword,idxinvec.vocabulary_.items()] words_freq = sorted(words_freq, key=lambda x: x[1],
reverse=True)
returnwords_freq[:n]


common_words=get_top_n_words(data['text'],20)
df1=pd.DataFrame(common_words,columns=['Review','count'])

df1.groupby('Review').sum()['count'].sort_values(ascending=False).plot( kind='bar',
figsize=(10, 6), xlabel="TopWords", ylabel="Count",
title="BarChartofTopWordsFrequency"
)

fromsklearn.model_selectionimporttrain_test_split from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression x_train,x_test,y_train,y_test=train_test_split(data['text'],
data['class'], test_size=0.25)
 
fromsklearn.feature_extraction.textimportTfidfVectorizer

vectorization=TfidfVectorizer()
x_train=vectorization.fit_transform(x_train) x_test = vectorization.transform(x_test)
fromsklearn.linear_modelimportLogisticRegression model = LogisticRegression()
model.fit(x_train,y_train)

print(accuracy_score(y_train, model.predict(x_train))) print(accuracy_score(y_test, model.predict(x_test)))

fromsklearn.treeimportDecisionTreeClassifier

model=DecisionTreeClassifier() model.fit(x_train, y_train)
print(accuracy_score(y_train, model.predict(x_train))) print(accuracy_score(y_test, model.predict(x_test)))

fromsklearnimportmetrics
cm = metrics.confusion_matrix(y_test, model.predict(x_test)) cm_display=metrics.ConfusionMatrixDisplay(confusion_matrix=cm,
display_labels=[False,True])

cm_display.plot()
 
plt.show()
